function pond -a command -d "A fish shell environment manager"
    set -l pond_version 0.3.0

    function __pond_usage
        functions -e __pond_usage
        echo "Usage: pond <subcommand> ..."
        echo "Pond management:"
        echo "       pond create  <name>  Create a new pond"
        echo "       pond remove  <name>  Remove a pond and associated configuration"
        echo "       pond list            List all ponds"
        echo "       pond enable          Enable a pond for new shell sessions"
        echo "       pond disable         Disable a pond for new shell sessions"
        echo "       pond load            Load pond variables into current shell session"
        echo "       pond unload          Unload pond variables from current shell session"
        echo "       pond status          View pond status information"
        echo "Variable management:"
        echo "       pond var list    <pond>                List all pond variables"
        echo "       pond var set     <pond> <var> <value>  Set pond variable"
        echo "       pond var get     <pond> <var>          Get pond variable"
        echo "       pond var remove  <pond> <var>          Remove pond variable"
        echo "Options:"
        echo "       -v or --version  Print version"
        echo "       -h or --help     Print this help message"
    end

    function __pond_exists -a pond_name
        functions -e __pond_exists
        test -d $pond_data/$pond_name
    end

    function __pond_show_exists_error
        functions -e __pond_show_exists_error
        echo "Pond already exists" >&2
    end

    function __pond_show_not_exists_error
        functions -e __pond_show_not_exists_error
        echo "Pond does not exist" >&2
    end

    function __pond_show_name_missing_error
        functions -e __pond_show_name_missing_error
        echo "No pond name specified" >&2
    end

    function __pond_show_var_operation_missing_error
        functions -e __pond_show_var_operation_missing_error
        echo "No variable operation specified" >&2
    end

    function __pond_show_var_name_missing_error
        functions -e __pond_show_var_name_missing_error
        echo "No variable name specified" >&2
    end

    function __pond_show_var_value_missing_error
        functions -e __pond_show_var_value_missing_error
        echo "No variable value specified" >&2
    end

    switch $command
        case -v --version
            echo "pond $pond_version"
        case '' -h --help
            __pond_usage
        case new create
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end
            if __pond_exists $pond_name; __pond_show_exists_error >&2 && return 1; end

            mkdir -p $pond_data/$pond_name >/dev/null 2>&1
            if test $status -ne 0
                echo "Could not create pond directory at $pond_data/$pond_name" >&2 && return 1
            end

            echo "# This file was auto-generated by pond; modify at your own risk" >> $pond_data/$pond_name/$pond_vars 2>/dev/null
            if test $status -ne 0
                echo "Could not create pond variables file $pond_data/$pond_name/$pond_vars" >&2 && return 1
            end

            mkdir -p $pond_data/$pond_name/$pond_functions >/dev/null 2>&1
            if test $status -ne 0
                echo "Could not create pond functions directory $pond_data/$pond_name/$pond_functions" >&2 && return 1
            end

            echo "Created an empty pond: $pond_name"

            if test $pond_enable_on_create
                ln -s $pond_data/$pond_name $pond_links/$pond_name >/dev/null 2>&1
                if test $status -ne 0
                    echo "Could not create pond symbolic link at $pond_links/$pond_name" >&2 && return 1
                end
            end
        case ls list
            set -l pond_paths $pond_data/*

            if test (count $pond_paths) -eq 0
                echo "No ponds found'" >&2 && return 1
            else
                for pond_path in $pond_paths
                    echo (basename $pond_path)
                end
            end
        case rm remove
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end

            if __pond_exists $pond_name
                read --prompt-str "Are you sure you want to remove pond: $pond_name? " answer
                if string length -q $answer; and string match -i -r '^(y|yes)$' -q $answer
                    rm -rf $pond_data/$pond_name
                    if test $status -eq 0
                        echo "Removed pond: $pond_name"
                    else
                        echo "Unable to remove pond: $pond_name" >&2 && return 1
                    end
                end
            else
                echo "Pond does not exist: $pond_name" >&2 && return 1
            end
        case link enable
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end
            if ! __pond_exists $pond_name; __pond_show_not_exists_error >&2 && return 1; end

            if test -L $pond_links/$pond_name
                echo "Pond is already enabled: $pond_name" >&2 && return 1
            else
                ln -s $pond_data/$pond_name $pond_links/$pond_name >/dev/null 2>&1
                if test $status -ne 0
                    echo "Could not create pond symbolic link at $pond_links/$pond_name" >&2 && return 1
                end

                echo "Enabled pond: $pond_name"
            end
        case unlink disable
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end
            if ! __pond_exists $pond_name; __pond_show_not_exists_error >&2 && return 1; end


            if ! test -L $pond_links/$pond_name
                echo "Pond is already disabled: $pond_name" >&2 && return 1
            else
                unlink $pond_links/$pond_name >/dev/null 2>&1
                if test $status -ne 0
                    echo "Could not remove symbolic link at $pond_links/$pond_name" >&2 && return 1
                end

                echo "Disabled pond: $pond_name"
            end
        case status
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end
            if ! __pond_exists $pond_name; __pond_show_not_exists_error >&2 && return 1; end

            echo "name: $pond_name"
            echo "enabled: "(test -L $pond_links/$pond_name; and echo 'yes'; or echo 'no')

            set matches (grep "^set -xg [A-Za-z0-9_]+ .*\$" $pond_data/$pond_name/$pond_vars)
            # TODO $status check

            echo "variables: "(count $matches)
            echo "path: $pond_data/$pond_name"
        case load
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end

            source $pond_data/$pond_name/$pond_vars
            if test $status -ne 0
                echo "Unable to source variables file at $pond_data/$pond_name/$pond_vars" >&2 && return 1
            end

            echo "Pond loaded into current shell session: $pond_name"
        case unload
            set -l pond_name "$argv[2]"

            if test -z $pond_name; __pond_show_name_missing_error && return 1; end

            while read -la line
                if test -z "$line"; or string match -r '^#' "$line" -q
                    continue
                end

                set tokens (string match -r '^set -xg [A-Za-z0-9_]+ (.*)$' "$line")
                set -e $tokens[2]
                if test $status -ne 0
                    echo "Unable to erase variable from environment '$tokens[2]'" >&2 && return 1
                end
            end < $pond_data/$pond_name/$pond_vars

            echo "Pond unloaded from current shell session: $pond_name"
        case var variable
            set -l var_operation "$argv[2]"
            set -l pond_name "$argv[3]"
            set -l var_name "$argv[4]"
            set -l var_value "$argv[5..-1]"

            if test -z $var_operation; __pond_show_var_operation_missing_error && return 1; end
            if test -z $pond_name; __pond_show_name_missing_error && return 1; end
            if test -z $var_name; __pond_show_var_name_missing_error && return 1; end

            if ! __pond_exists $pond_name; __pond_show_not_exists_error >&2 && return 1; end

            switch $var_operation
                case ls list
                    grep -E '^set -xg [A-Za-z0-9_]+ .*$' $pond_data/$pond_name/$pond_vars
                case get
                    while read -la line
                        if set tokens (string match -r '^set -xg ([A-Za-z0-9_]+) (.*)$' "$line") $status -eq 0
                            if test $tokens[2] = $var_name
                                echo "$tokens[3]"
                                return 0
                            end
                        end
                    end < $pond_data/$pond_name/$pond_vars
                    echo "No pond variable found: $var_name" >&2 && return 1
                case set
                    if test -z $var_value; __pond_show_var_value_missing_error && return 1; end

                    if grep -q "^set -xg $var_name .*\$" $pond_data/$pond_name/$pond_vars
                        echo "Variable already exists in pond: $var_name" >&2 && return 1
                    else
                        echo "set -xg $var_name $var_value" >> $pond_data/$pond_name/$pond_vars
                        echo "Set pond variable: $var_name"
                    end
                case rm remove
                    if grep -q "^set -xg $var_name .*\$" $pond_data/$pond_name/$pond_vars
                        grep -v "^set -xg $var_name .*\$" $pond_data/$pond_name/$pond_vars > $pond_data/$pond_name/$pond_vars.rmop
                        mv $pond_data/$pond_name/$pond_vars.rmop $pond_data/$pond_name/$pond_vars
                        set -u $var_name
                        echo "Variable removed from pond: $var_name"
                    else
                        echo "No pond variable found: $var_name" >&2 && return 1
                    end
                case '*'
                    echo "Unknown subcommand: $command" >&2 && return 1
            end
        case '*'
            __pond_usage
            echo "Unknown subcommand: $command" >&2 && return 1
    end
end
